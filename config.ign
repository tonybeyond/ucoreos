{
  "ignition": {
    "version": "3.5.0"
  },
  "passwd": {
    "users": [
      {
        "groups": [
          "wheel",
          "docker"
        ],
        "name": "core",
        "sshAuthorizedKeys": [
          "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFZ3ItpfqjPT1XjQUX4uV/rnG7Lhm1NnG7WDzsU8FgJo machy@MiniMin.local"
        ]
      }
    ]
  },
  "storage": {
    "files": [
      {
        "path": "/etc/hostname",
        "contents": {
          "compression": "",
          "source": "data:,ucore-gpu-vm"
        },
        "mode": 420
      },
      {
        "path": "/etc/zincati/config.d/90-disable-auto-updates.toml",
        "contents": {
          "compression": "",
          "source": "data:,%5Bupdates%5D%0Aenabled%20%3D%20false%0A"
        },
        "mode": 420
      }
    ]
  },
  "systemd": {
    "units": [
      {
        "contents": "[Unit]\nDescription=Rebase to uCore NVIDIA, reboot once done\nWants=network-online.target\nAfter=network-online.target\nConditionPathExists=!/etc/ucore-rebase-stamp\n\n[Service]\nType=oneshot\nExecStart=/usr/bin/rpm-ostree rebase ostree-unverified-registry:ghcr.io/ublue-os/ucore:stable-nvidia\nExecStartPost=/usr/bin/touch /etc/ucore-rebase-stamp\nExecStartPost=/usr/bin/systemctl disable setup-ucore.service\nExecStartPost=/usr/bin/systemctl reboot\n\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "setup-ucore.service"
      },
      {
        "enabled": true,
        "name": "podman.socket"
      },
      {
        "contents": "[Unit]\nDescription=Create Docker socket compatibility symlink\nAfter=podman.socket\nWants=podman.socket\n\n[Service]\nType=oneshot\nRemainAfterExit=yes\nExecStart=/usr/bin/mkdir -p /var/run\nExecStart=/usr/bin/ln -sf /run/podman/podman.sock /var/run/docker.sock\n\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "docker-socket-symlink.service"
      },
      {
        "contents": "[Unit]\nDescription=QEMU Guest Agent (container)\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nRestart=always\nTimeoutStartSec=300\nExecStartPre=-/usr/bin/podman pull docker.io/danskadra/qemu-ga:latest\nExecStart=/usr/bin/podman run --rm --name qemu-ga --privileged --uts=host --net=host -v /dev:/dev -v /etc/os-release:/etc/os-release:ro -v /var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket -v /sys/fs/cgroup:/sys/fs/cgroup -v /sbin/shutdown:/sbin/shutdown -v /bin/systemctl:/bin/systemctl -v /usr/lib/systemd:/usr/lib/systemd -v /lib64:/lib64 docker.io/danskadra/qemu-ga:latest -v\nExecStop=/usr/bin/podman stop qemu-ga\n\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "qemu-guest-agent-container.service"
      },
      {
        "contents": "[Unit]\nDescription=Generate CDI spec for NVIDIA GPUs\nAfter=multi-user.target\nWants=multi-user.target\n\n[Service]\nType=oneshot\nExecStartPre=/usr/bin/mkdir -p /etc/cdi\nExecStartPre=/usr/bin/sleep 15\nExecStart=/usr/bin/nvidia-ctk cdi generate --output=/etc/cdi/nvidia.yaml\n\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "nvidia-cdi-generate.service"
      },
      {
        "contents": "[Unit]\nDescription=Ollama LLM Container with NVIDIA GPU\nWants=network-online.target\nAfter=network-online.target nvidia-cdi-generate.service\nRequires=nvidia-cdi-generate.service\n\n[Service]\nRestart=always\nTimeoutStartSec=15m\nExecStartPre=-/usr/bin/podman pull docker.io/ollama/ollama:latest\nExecStart=/usr/bin/podman run --rm --name ollama --security-opt label=disable --device nvidia.com/gpu=all -p 0.0.0.0:11434:11434 -v ollama-data:/root/.ollama docker.io/ollama/ollama:latest\nExecStop=/usr/bin/podman stop ollama\n\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "ollama-container.service"
      },
      {
        "contents": "[Unit]\nDescription=Tailscale container\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nRestart=always\nExecStartPre=-/usr/bin/podman pull docker.io/tailscale/tailscale:latest\nExecStart=/usr/bin/podman run --rm --name tailscaled --network host --cap-add NET_ADMIN --cap-add NET_RAW -v /var/lib/tailscale:/var/lib/tailscale -v /dev/net/tun:/dev/net/tun docker.io/tailscale/tailscale:latest\nExecStop=/usr/bin/podman stop tailscaled\n\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "tailscale-container.service"
      },
      {
        "contents": "[Unit]\nDescription=Beszel monitoring agent\nWants=network-online.target docker-socket-symlink.service\nAfter=network-online.target docker-socket-symlink.service\n\n[Service]\nRestart=always\nTimeoutStartSec=300\nExecStartPre=-/usr/bin/podman pull ghcr.io/henrygd/beszel/beszel-agent:latest\nExecStart=/usr/bin/podman run --rm --name beszel-agent --network host -v /var/run/docker.sock:/var/run/docker.sock:ro -e KEY=\"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIF4yxm1ANn7nACe+Rhw2ipuUWf53pC4cIEMjYLhb5oB0\" -e LISTEN=45876 ghcr.io/henrygd/beszel/beszel-agent:latest\nExecStop=/usr/bin/podman stop beszel-agent\n\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "beszel-agent.service"
      },
      {
        "contents": "[Unit]\nDescription=Open firewall port for Beszel agent\nAfter=firewalld.service\nWants=firewalld.service\n\n[Service]\nType=oneshot\nRemainAfterExit=yes\nExecStart=/usr/bin/firewall-cmd --permanent --add-port=45876/tcp\nExecStart=/usr/bin/firewall-cmd --reload\n\n[Install]\nWantedBy=multi-user.target\n",
        "enabled": true,
        "name": "firewall-beszel.service"
      }
    ]
  }
}
